<div class="relative h-screen w-screen bg-secondary">
  <canvas phx-update="ignore" id="canvas" class="fixed inset-0 z-0 bg-inherit select-none">
  </canvas>
  <canvas
    :if={@outershell && @outershell.resp}
    phx-update="ignore"
    id="outercanvas"
    class={[
      "fixed inset-0 z-0 bg-black/50 select-none",
      !@outershell && "pointer-events-none"
    ]}
  >
  </canvas>
  <!-- Desktop Layout (lg and up) -->
  <div class="fixed inset-0 grid grid-cols-[50dvw_10dvw_40dvw] md:grid-cols-[35dvw_30dvw_35dvw]  grid-rows-[60vh_40vh]  lg:grid-cols-[25dvw_55dvw_20dvw]  lg:grid-rows-[1fr_30vh] gap-1 pointer-events-none">
    
<!-- Left Pane - Code Editor -->
    <div class="row-span-1 col-span-1 lg:row-span-2 mt-2 lg:col-span-1 overflow-y-hidden pointer-events-none  scrollbar-hide">
      <!-- Function Marks -->
      <div class="absolute flex justify-start space-x-0.5">
        <div class="select-none flex pointer-events-auto caret-[#a0ea00]">
          <!-- Example bookmarks -->
          <div
            class="px-2 font-mono text-xs transition duration-200 rounded  cursor-pointer focus:outline-none  border-r-2 border-accent/50 text-primary hover:bg-accent/50 hover:text-primary-content"
            phx-click="seeTurtle"
          >
            <span class="font-paperlang inline">~</span>
          </div>
          <!-- Tab Groups 1/4 vw wrt to grid and 1/3  -->
          <div class="flex w-full max-w-[30dvw] lg:max-w-[21dvw] ">
            <div
              class="absolute right-4 top-0 z-10 h-4 w-6 bg-gradient-to-l rounded-r-lg from-accent/50 to-transparent pointer-events-none transition-opacity duration-300"
              id="right-blur"
            >
            </div>
            <div
              id="tabs"
              class="flex flex-row items-center overflow-x-auto scrollbar-hide scroll-smooth"
              phx-update="ignore"
            >
              <div
                :for={%{"value" => value} <- [%{"value" => "Papert"}]}
                data-alive
                data-tab-id="root"
                class="tab-instance flex-1 animate-fade select-none hidden pl-1 pr-2 font-mono text-xs transition-all duration-200  border-r-1 focus-within:outline-none text-primary-content rounded-r-lg hover:border-r-2 hover:border-primary hover:text-accent-content border-accent group flex items-center  data-alive:border-accent-content data-alive:border-accent-content data-alive:border-b-1"
                id="tab-scaffold-root"
                ondblclick="const input=this.querySelector('input');input.disabled=false;input.focus();"
              >
                <input
                  type="text"
                  id={"tab-#{value}"}
                  value={value}
                  data-original={value}
                  class="bg-transparent hover:bg-base-100 pointer-events-none hover:bg-base-100/20 focus:bg-base-100/30 border-transparent focus:border-accent/50 border-b transition-all duration-200 outline-none text-primary-content focus:text-base-content -mr-1 placeholder-primary-content/60 text-xs min-w-[1ch] max-w-[7ch] w-full group-hover:bg-base-100/10"
                  placeholder="name"
                  onfocus="var value = this.value; this.value = null; this.value = value;this.style.pointerEvents='auto'"
                  phx-update="ignore"
                  disabled
                  onblur="this.disabled=true;this.style.pointerEvents='none';this.closest('[id^=\'tab-scaffold\']').style.pointerEvents='auto';this.style.width=Math.max(this.value.length||this.placeholder.length,1)+'ch';this.setSelectionRange(0, 0);"
                  onkeydown="if(event.key==='Enter')this.blur();if(event.key==='Escape'){this.value=this.dataset.original;this.blur()}"
                  oninput="this.style.width=Math.max(this.value.length||this.placeholder.length,1)+1+'ch'"
                />
                <button
                  class="close ml-1 pl-1 pointer-events-auto -mr-1 w-1 h-3 opacity-0 group-hover:w-3 group-hover:opacity-60 cursor-pointer hover:opacity-100 transition-opacity duration-200 flex items-center justify-center text-red-500/70 hover:text-red-500 data-alive:w-3  data-alive:opacity-100"
                  title="Close tab"
                  onclick="event.stopPropagation()"
                >
                  <svg
                    class="w-2 h-2"
                    viewBox="0 0 12 12"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                  >
                    <path d="M3 3l6 6M9 3l-6 6" />
                  </svg>
                </button>
              </div>

              <script>
                window.addEventListener('DOMContentLoaded', () => {
                      document.querySelectorAll('input[id^="tab-"]').forEach(input => {input.style.width=Math.max(input.value.length||input.placeholder.length,1)+'ch';});
                    });
              </script>
            </div>
          </div>
          <!-- New Tab Creator Button -->
          <button
            class="px-1 ml-2 font-mono text-xs transition-all duration-300 focus:outline-none text-primary-content rounded-r-lg hover:text-primary hover:border-r-2 hover:border-accent active:border-primary transform  cursor-copy group"
            phx-click={JS.dispatch("phx:opBuffer", detail: %{op: "add"})}
          >
            <span class="inline transition-all duration-300 group-hover:scale-150">
              +
            </span>
          </button>
        </div>
      </div>
      <!-- Editor -->
      <div
        phx-update="ignore"
        id="runenv"
        class="mt-5 mb-6 rounded-sm backdrop-blur-xs  pointer-events-auto dark-scrollbar [scrollbar-width:none] [&::-webkit-scrollbar]:hidden cursor-text bg-amber-600/5 border-amber-600/20 h-8/9"
      >
        <div phx-click="flipWell">
          <.folders
            :if={false}
            class="absolute top-5 right-6 w-5 h-5  fill-primary/50 hover:fill-amber-400 cursor-pointer"
          />
        </div>
        <div class="relative z-10">
          <.slider slider_value="50" />
        </div>
        <textarea
          id="your-buffer"
          class="relative rounded-sm pointer-events-auto cursor-text bg-amber-600/5 border-none h-11/12"
          phx-hook="Shell"
          data-target="canvas"
        />
        <div
          phx-update="ignore"
          id="output"
          class="fixed -bottom-1/12 overflow-y-auto pb-1 font-mono border-none text-primary left-2"
        >
        </div>
      </div>
      <!-- Code Output -->

    </div>
    <!-- Zhong -->
    <div class="bg-transparent pointer-events-none select-none" />
    <!-- Right pane -->
    <div class="row-span-1 col-span-1 lg:row-span-2 p-4 relative ">
      <div id="sessionbox">
        <div :if={!@session.name} class="relative group w-60">
          <!-- Login Link Button -->
          <.link
            navigate={~p"/welcome"}
            class="relative px-4 py-2 ml-10 font-mono text-sm transition-colors duration-300 pointer-events-auto text-amber-400/80 hover:text-amber-300"
          >
            <span class="relative z-10 text-end">Enter the Shell</span>
            <!-- Animated underscore cursor -->
            <span class="inline-block w-2 h-0.5 ml-1 bg-amber-400 animate-flicker">_</span>
          </.link>
        </div>

        <div
          :if={@session.name}
          class="relative font-mono right-2 text-primary bg-transparent border border-none rounded px-2 py-1 w-full max-w-xs"
        >
          
<!-- Welcome message row -->
          <div class="flex items-center text-xs mb-1 border-b border-accent/50 pb-1 overflow-hidden">
            <span class="flex items-center truncate">
              &gt; {gettext("welcome %{name} to⠀%{clan}'s shell",
                clan: to_titlecase(@clan),
                name: @session.name
              )}
              <span class="relative flex items-center ml-1">
                <span class="h-1.5 w-1.5 rounded-full bg-amber-500 animate-pulse"></span>
              </span>
            </span>
          </div>
          
<!-- Command keys row -->
          <div class="flex items-center justify-between">
            <div
              :if={@outershell && @outershell.resp}
              class="max-w-20 bg-gradient-to-r from-background to-transparent overflow-hidden whitespace-nowrap flex-shrink-1 sm:flex-shrink-0 flex items-center  text-xs mr-1 sm:mr-2 min-w-0"
            >
              <span class="text-amber-600 animate-marquee">
                {gettext("summoning @%{addr}'s code", addr: @outershell.resp)} ☄
              </span>
            </div>
            <!-- Empty spacer div with minimum width on small screens -->


            <!-- Command buttons always aligned to right and given prio -->
            <div class="flex flex-shrink-0 z-30 ml-auto cursor-pointer pointer-events-auto justify-end">
              <button
                :if={@sensei}
                id="endrecording"
                class="relative hidden w-8 h-8 border-2 border-primary/50  backdrop-blur-sm transform transition-all duration-300 hover:scale-110 hover:rotate-[15deg] disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100 disabled:hover:rotate-0 sm:w-6 sm:h-6 mx-0.5 rounded-sm flex items-center justify-center hover:fill-primary active:border-amber-500 touch-manipulation"
                phx-click={
                  JS.dispatch("phx:relayCamera", detail: %{command: "end_record"})
                  |> JS.hide(to: "#endrecording")
                  |> JS.show(to: "#startrecording")
                }
              >
                <.record class="w-5 h-5 animate-rotate transition-transform duration-700  fill-red-800 text-amber-400/50 hover:rotate-[-40deg]" />
              </button>

              <button
                :if={@sensei}
                id="startrecording"
                class="relative w-8 h-8 border-1 border-accent backdrop-blur-sm transform transition-all duration-300 hover:scale-110 hover:rotate-[15deg] disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100 disabled:hover:rotate-0 sm:w-6 sm:h-6 mx-0.5 rounded-sm flex items-center justify-center hover:fill-primary active:border-amber-500 touch-manipulation"
                phx-click={
                  JS.dispatch("phx:relayCamera", detail: %{command: "start_record"})
                  |> JS.hide(to: "#startrecording")
                  |> JS.show(to: "#endrecording")
                }
              >
                <.record class="w-5 h-5 transition-transform duration-700  fill-amber-400 text-amber-400/50 hover:rotate-[-40deg]" />
              </button>

              <button
                class="relative w-9 h-9 border-1 border-accent backdrop-blur-sm transform transition-all duration-300 hover:scale-110 hover:rotate-[15deg] disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100 disabled:hover:rotate-0 lg:w-8 lg:h-8 lg:mx-1 rounded-sm flex items-center justify-center hover:fill-primary active:border-primary touch-manipulation"
                phx-click={JS.dispatch("phx:relayCamera", detail: %{command: "center_camera"})}
              >
                <.centering class="w-7 h-7 transition-transform duration-700  fill-primary hover:rotate-[-40deg]" />
              </button>

              <button
                class="relative w-9 h-9 border-1 border-accent backdrop-blur-sm transform transition-all duration-300 hover:scale-110 hover:rotate-[15deg] disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100 disabled:hover:rotate-0 lg:w-8 lg:h-8 mx-2 lg:mx-1 rounded-sm flex items-center justify-center hover:fill-primary active:border-amber-500 touch-manipulation"
                phx-click={
                  (@outershell &&
                     JS.dispatch("phx:outerkeepCanvas",
                       detail: %{"title" => @outershell.resp <> "'s " <> @outershell.title}
                     )) ||
                    JS.dispatch("phx:selfkeepCanvas",
                      detail: %{"title" => @session.name <> "'s " <> @mytitle}
                    )
                }
              >
                <.save class="w-4 h-4 duration-700  transition-transform duration-700  " />
              </button>

              <button
                class="relative w-9 h-9 border-1 border-accent fill-primary  backdrop-blur-sm transform transition-all duration-300 hover:scale-110 hover:rotate-[15deg] disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100 disabled:hover:rotate-0 lg:w-8 lg:h-8 lg:mx-1 rounded-sm flex items-center justify-center hover:fill-primary active:border-amber-500 touch-manipulation"
                phx-click={ JS.toggle(to: ".deck")}
              >
                <.manual class="w-6 h-6 transition-transform duration-700 rotate-[-60deg] cursor-help fill-primary hover:rotate-[-40deg]" />
              </button>
            </div>
          </div>
          <!-- Decorative corners (smaller size for subtlety) -->
          <div class="absolute -top-0.5 -left-0.5 w-2 h-2 border-t border-l border-primary-content">
          </div>
          <div class="absolute -top-0.5 -right-0.5 w-2 h-2 border-t border-r border-primary-content">
          </div>
          <div class="absolute -bottom-0.5 -left-0.5 w-2 h-2 border-b border-l border-primary-content">
          </div>
          <div class="absolute -bottom-0.5 -right-0.5 w-2 h-2 border-b border-r border-primary-content">
          </div>
        </div>
      </div>
      <.outershell :if={@outershell && @outershell.resp} outershell={@outershell}/>
      <.deck/>
    </div>
    
<!-- <div class="backdrop-blur-sm border border-gray-700/50 rounded-lg p-4"/> -->
    <!-- Bottom Pane - Visual Previews (spans both columns) -->
    <div class="col-span-3 row-start-2 lg:row-span-1 lg:col-span-1 ">
      <div
        id="paneflip"
        class="fixed z-30 -translate-x-1/2 pointer-events-auto  transition-transform duration-300 pointer-events-auto bottom-2 left-1/2"
        phx-hook="Sensei"
      >
        <svg
          class={"z-20 w-6 h-6  text-primary/50 items-center flex  m-auto  rounded-lg backdrop-blur-sm transform transition-transform duration-300 hover:text-amber-400 cursor-pointer" <> if(@pane, do: " rotate-180", else: "")}
          phx-click="flipPane"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
        >
          <path d="M18 15l-6-6-6 6" />
        </svg>
      </div>
      <%!-- Turtle viewing pane --%>
      <div
        :if={@pane}
        id="disciple_panels"
        phx-hook="DiscipleWindow"
        class="fixed bg-transparent bottom-0 pointer-events-none  z-40 flex w-3/5 p-4 m-4 overflow-x-scroll transform -translate-x-1/2 rounded-md left-1/2 dark-scrollbar touch-pan-x overscroll-auto"
      >
        <!-- Other people's turtles -->
        <div
          :for={{phx_ref, dis} <- @disciples |> Enum.sort_by(&elem(&1, 1).online_at, :desc)}
          class="bg-transparent pointer-events-auto"
        >
          <div class={"rounded-lg transition pb-4 pt-2 duration-500 ease-in-out mx-2 animate-fade flex-shrink-0" <> is_main_focus(dis.phx_ref, @focused_phx_ref)}>
            <.icon
              :if={@sensei}
              name="hero-cursor-arrow-ripple"
              phx-click="toggle-focus"
              phx-value-disciple-phx_ref={phx_ref}
              class="cursor-pointer pointer-events-auto text-primary"
            />
            <div
              phx-click={JS.push("seeTurtle") |> JS.hide(to: ".rightthird")}
              phx-throttle="500"
              phx-value-addr={phx_ref}
              class={[
                "relative flex justify-center items-center h-32 lg:w-48 w-32 border rounded-md hover:border-primary",
                (Map.has_key?(dis, :meta) && "cursor-alias pointer-events-auto") ||
                  "cursor-progress pointer-events-none",
                (@outershell && @outershell.addr == phx_ref &&
                   "border-accent-content text-accent-content") ||
                  "border-accent/50 text-accent"
              ]}
            >
              <div class="absolute font-mono text-sm tracking-wider rotate-0 select-none top-2 right-2">
                {dis.name}
              </div>

              <.droplet_loader
                :if={!Map.has_key?(dis, :meta)}
                class="size-10 fill-amber-600"
                loading="eager"
                decoding="sync"
              />
              <img
                :if={Map.has_key?(dis, :meta)}
                src={dis.meta.path}
                onerror="this.src='/images/turtlehead.png';"
                class="object-scale-down max-h-full m-auto"
                loading="eager"
                decoding="sync"
              />
            </div>
          </div>
        </div>

        <div :if={@sensei} class="z-50 flex mb-2 pointer-events-auto">
          <.export />
        </div>
      </div>
    </div>
  </div>
</div>
